{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Simple Poetry A clean, automated setup for publishing simple Python packages to PyPI using Poetry and GitHub Actions. Setup Prepare GitHub repo Create new GitHub repository / fork this repository Setup PyPI Credentials in repository secrets PYPI_TOKEN : PyPI API token Replace text in files Rename simple_poetry folder to <package_name> Replace all simple_poetry instance in files to <package_name> Replace all simple-poetry instance in files to <package-name> Replace all 3.8 instance in files to <target-python-version> Replace ppeetteerrs with <github_user_name > Enter Package Information pyproject.toml : Project description, authors <package_name>/__init__.py : Author and email README.md : Customize it, change the name and description especially Further Customizations mkdocs.yaml : Edit theme and mkdocstrings preferences (Can also add sub-pages to API Reference etc.) .devcontainer.json : Add preferred extensions / build configurations (e.g. use GPUs) Dockerfile : Install necessary formatters / linters / packages for local testing docs/ : Write your documentation .github/workflows/push.yaml : Remove the tests::Run Tests step if you need to run tests locally (e.g. if your tests require GPU). Keep the rest to upload Codecov. .gitignore : Remove coverage.xml if you need to run tests locally. Publish and Setup GitHub Pages commit and push your changes Create first release Go to Settings and activate your GitHub Pages using the gh-pages branch","title":"Home"},{"location":"#simple-poetry","text":"A clean, automated setup for publishing simple Python packages to PyPI using Poetry and GitHub Actions.","title":"Simple Poetry"},{"location":"#setup","text":"Prepare GitHub repo Create new GitHub repository / fork this repository Setup PyPI Credentials in repository secrets PYPI_TOKEN : PyPI API token Replace text in files Rename simple_poetry folder to <package_name> Replace all simple_poetry instance in files to <package_name> Replace all simple-poetry instance in files to <package-name> Replace all 3.8 instance in files to <target-python-version> Replace ppeetteerrs with <github_user_name > Enter Package Information pyproject.toml : Project description, authors <package_name>/__init__.py : Author and email README.md : Customize it, change the name and description especially Further Customizations mkdocs.yaml : Edit theme and mkdocstrings preferences (Can also add sub-pages to API Reference etc.) .devcontainer.json : Add preferred extensions / build configurations (e.g. use GPUs) Dockerfile : Install necessary formatters / linters / packages for local testing docs/ : Write your documentation .github/workflows/push.yaml : Remove the tests::Run Tests step if you need to run tests locally (e.g. if your tests require GPU). Keep the rest to upload Codecov. .gitignore : Remove coverage.xml if you need to run tests locally. Publish and Setup GitHub Pages commit and push your changes Create first release Go to Settings and activate your GitHub Pages using the gh-pages branch","title":"Setup"},{"location":"all/","text":"__author__ module-attribute __author__ = 'Peter Yuen' __email__ module-attribute __email__ = 'ppeetteerrsx@gmail.com' __version__ module-attribute __version__ = metadata . version ( 'simple_poetry' ) __docs __docs () Build gh-pages documentation branch. Source code in simple_poetry/__init__.py 32 33 34 35 36 37 38 39 def __docs (): # pragma: no cover \"\"\" Build gh-pages documentation branch. \"\"\" shell ( \"cp README.md docs/index.md && \\ mkdocs gh-deploy --force\" ) __serve __serve () Serve local documentation. Source code in simple_poetry/__init__.py 22 23 24 25 26 27 28 29 def __serve (): # pragma: no cover \"\"\" Serve local documentation. \"\"\" shell ( \"cp README.md docs/index.md && \\ mkdocs serve\" ) __test __test () Runs pytest locally and keeps only coverage.xml for GitHub Actions to upload to Codecov. Source code in simple_poetry/__init__.py 12 13 14 15 16 17 18 19 def __test (): # pragma: no cover \"\"\" Runs pytest locally and keeps only `coverage.xml` for GitHub Actions to upload to Codecov. \"\"\" shell ( \"pytest --cov=simple_poetry --cov-report xml --cov-report term-missing tests \\ && rm -rf .pytest_cache && rm .coverage\" )","title":"API Reference"},{"location":"all/#simple_poetry.__author__","text":"__author__ = 'Peter Yuen'","title":"__author__"},{"location":"all/#simple_poetry.__email__","text":"__email__ = 'ppeetteerrsx@gmail.com'","title":"__email__"},{"location":"all/#simple_poetry.__version__","text":"__version__ = metadata . version ( 'simple_poetry' )","title":"__version__"},{"location":"all/#simple_poetry.__docs","text":"__docs () Build gh-pages documentation branch. Source code in simple_poetry/__init__.py 32 33 34 35 36 37 38 39 def __docs (): # pragma: no cover \"\"\" Build gh-pages documentation branch. \"\"\" shell ( \"cp README.md docs/index.md && \\ mkdocs gh-deploy --force\" )","title":"__docs()"},{"location":"all/#simple_poetry.__serve","text":"__serve () Serve local documentation. Source code in simple_poetry/__init__.py 22 23 24 25 26 27 28 29 def __serve (): # pragma: no cover \"\"\" Serve local documentation. \"\"\" shell ( \"cp README.md docs/index.md && \\ mkdocs serve\" )","title":"__serve()"},{"location":"all/#simple_poetry.__test","text":"__test () Runs pytest locally and keeps only coverage.xml for GitHub Actions to upload to Codecov. Source code in simple_poetry/__init__.py 12 13 14 15 16 17 18 19 def __test (): # pragma: no cover \"\"\" Runs pytest locally and keeps only `coverage.xml` for GitHub Actions to upload to Codecov. \"\"\" shell ( \"pytest --cov=simple_poetry --cov-report xml --cov-report term-missing tests \\ && rm -rf .pytest_cache && rm .coverage\" )","title":"__test()"}]}